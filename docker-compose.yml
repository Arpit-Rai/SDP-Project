version: '3.8'

services:
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  airflow-init:
    image: apache/airflow:2.8.1-python3.10
    container_name: airflow_init
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - PYTHONPATH=/opt/airflow:/opt/airflow/dags
    volumes:
      - ./app/dags:/opt/airflow/dags
      - ./app:/opt/airflow/app
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: >
      bash -c "airflow db init && airflow users create -u admin -p admin -f admin -l admin -r Admin -e 'admin@example.com'"
    networks:
      - app-network

  airflow-webserver:
    image: apache/airflow:2.8.1-python3.10
    container_name: airflow_web
    depends_on:
      - airflow-scheduler
      - postgres
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - PYTHONPATH=/opt/airflow:/opt/airflow/dags
    volumes:
      - ./app/dags:/opt/airflow/dags
      - ./app:/opt/airflow/app
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: webserver
    networks:
      - app-network

  airflow-scheduler:
    image: apache/airflow:2.8.1-python3.10
    container_name: airflow_scheduler
    depends_on:
      postgres:
        condition: service_started
      airflow-init:
        condition: service_completed_successfully
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - PYTHONPATH=/opt/airflow:/opt/airflow/dags
    volumes:
      - ./app/dags:/opt/airflow/dags
      - ./app:/opt/airflow/app
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: scheduler
    networks:
      - app-network

  fastapi_app:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: fastapi_app
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_started
      ollama:
        condition: service_healthy
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - YT_DLP_TEST_URL=${YT_DLP_TEST_URL}
    networks:
      - app-network

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - app-network
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "ollama serve > /dev/null 2>&1 & sleep 10 && ollama pull phi:latest && tail -f /dev/null"
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

  
  react_app:
    build:
      context: ./app/api/react_app
    ports:
      - "3000:80"
    depends_on:
      - fastapi_app
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  ollama_data: